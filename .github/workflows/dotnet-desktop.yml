name: Build 

on:
  push:
    branches:
      - lokesh
      - master
      - develop
      

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x' # adjust to your version
        
      - name: Get previous build number
        id: get_build_number
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            branch=main
          elif [[ ${{ github.ref }} == 'refs/heads/lokesh' ]]; then
            branch=lokesh
          elif [[ ${{ github.ref }} == refs/heads/release/* ]]; then
            branch=$(echo "${{ github.ref }}" | cut -d'/' -f3)
          else
            branch=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          fi
          # Fetch the top-most build number for the branch
          response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://github.com/nandireddy12321/CmsWebApi/actions/runs?branch=${branch}&per_page=5")
          http_status=$(echo "$response" | tail -c 4)  # Extract the last 3 characters (HTTP status code)
          response_body=$(echo "$response" | head -c -4)  # Remove the last 3 characters (HTTP status code)
          echo "HTTP Status Code: $http_status"
          echo "API Response: $response_body"
          if [[ "$http_status" == "200" ]]; then
            build_number=$(echo "$response_body" | jq -r '.workflow_runs[0].run_number')
            echo "::set-output name=build_number::$build_number"
          else
            echo "API request failed with status code $http_status"
            echo "::set-output name=build_number::0"  # Set default build number to 0 in case of failure
          fi
        
        
      - name: Use build number
        run: |
          echo "Top most build number for ${{ github.ref }} is ${{ steps.get_build_number.outputs.build_number }}"
      - name: Extract version number
        id: extract_version
        run: |
          # Extract the version number from the .csproj file
          VERSION=$(grep -oP '<Version>\K[^<]+' CmsWebApi.csproj)
          echo "::set-output name=version::$VERSION"

      - name: Update version number
        run: |
          # Get the extracted version number
          EXTRACTED_VERSION=$(echo "${{ steps.extract_version.outputs.version }}")

          # Define the version placeholder
          VERSION_PLACEHOLDER="\?"

          # Extract the build number from GITHUB_RUN_NUMBER
          BUILD_NUMBER=${build_numbers}

          # Update the version number to include the build number
          UPDATED_VERSION=$(echo "${EXTRACTED_VERSION//$VERSION_PLACEHOLDER/$BUILD_NUMBER}")

          # Replace the version number placeholder in the .csproj file
          sed -i "s/<Version_Prefix>${EXTRACTED_VERSION}<\/Version_Prefix>/<Version_Prefix>${UPDATED_VERSION}<\/Version_Prefix>/" CmsWebApi.csproj
           sed -i "s/<Version>${EXTRACTED_VERSION}<\/Version>/<Version>${UPDATED_VERSION}<\/Version>/" CmsWebApi.csproj

          # Print the updated version and build number
          echo "Updated Version: ${UPDATED_VERSION}"
          echo "Build Number: ${BUILD_NUMBER}"

      - name: Extract version number after update
        id: extract_version_afterupdate
        run: |
          # Extract the version number from the .csproj file
          VERSION=$(grep -oP '<Version>\K[^<]+' CmsWebApi.csproj)
          echo "::set-output name=version::$VERSION"

      - name: Update version number
        run: |
          # Get the extracted version number
          EXTRACTED_VERSION=$(echo "${{ steps.extract_version_afterupdate.outputs.version }}")
   
